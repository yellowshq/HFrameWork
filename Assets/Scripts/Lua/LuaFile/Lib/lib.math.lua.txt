-- 判断是否小于等于0
function math.lessEqualZero(num)
    return num <= 0
end

function getIntPart(x)
    if math.lessEqualZero(x) then
        return math.ceil(x)
    end

    if math.ceil(x) == x then
        x = math.ceil(x)
    else
        x = math.ceil(x) - 1
    end
    return x
end

math.getInt = getIntPart

function math.clamp(value, min, max)
    if value < min then
        return min
    elseif value > max then
        return max
    else
        return value
    end
end

function math.getMailExpirationTime(milliseconds)
    local seconds = getIntPart(milliseconds / 1000)
    local ret = ""
    local s = seconds % 60
    local d = getIntPart(seconds / 86400)
    local h = getIntPart(seconds / 3600)
    local m = getIntPart(seconds / 60) - h * 60

    if h <= 1 and m <= 60 then
        ret = string.format(LocalizeManager.get("getMailExpirationTime1"), m)
    end
    if h > 1 then
        ret = string.format(LocalizeManager.get("getMailExpirationTime2"), h)
    end
    if d >= 1 then
        ret = string.format(LocalizeManager.get("getMailExpirationTime3"), d)
    end
    if d > 30 then
        ret = LocalizeManager.get("getMailExpirationTime4")
    end

    return ret
end

function math.getFormatPercent(p)
    return string.format("%0.2f%%", math.abs(p / 100))
end

function math.getOffLineTime(milliseconds)
    local seconds = getIntPart(milliseconds / 1000)
    local ret = ""
    local s = seconds % 60
    local d = getIntPart(seconds / 86400)
    local h = getIntPart(seconds / 3600)
    local m = getIntPart(seconds / 60) - h * 60

    if h <= 1 and m <= 60 then
        ret = string.format(LocalizeManager.get("getOffLineTime1"), m)
    end
    if h > 1 then
        ret = string.format(LocalizeManager.get("getOffLineTime2"), h)
    end
    if d >= 1 then
        ret = string.format(LocalizeManager.get("getOffLineTime3"), d)
    end
    if d > 30 then
        ret = LocalizeManager.get("getOffLineTime4")
    end
    return ret
end

--needTime 返回数据结构是否需要显示时间 
function math.getFormatTimeStamp(unixTime, needTime)
    local unixTimeSec = math.getInt(unixTime / 1000)
    if needTime then
        return os.date("%Y/%m/%d %H:%M:%S", unixTimeSec)
    else
        return os.date("%Y/%m/%d", unixTimeSec)
    end
end

function math.getFormatSeconds(seconds)
    seconds = math.getInt(seconds)
    local s = seconds % 60
    if s < 10 then
        s = "0" .. s
    end
    local h = getIntPart(seconds / 3600)
    local m = getIntPart(seconds / 60) - h * 60
    if m < 10 then
        m = "0" .. m
    end
    if h < 10 then
        h = "0" .. h
    end

    return string.format( "%s:%s:%s", h, m, s )
end

function math.getCommonTime(seconds)
    seconds = math.max(0,getIntPart(seconds))
	local d = getIntPart(seconds / 86400)
    local ret = ""

    if d>=3 then
        ret = string.format( LocalizeManager.get("dayLater"), d)
    elseif d >1 and d<3 then
        local lh = getIntPart((seconds - d*86400)/3600)
		if lh >= 1 then
			-- ret = LanguagePack:get(LanguageId.offLineHours,h)
            ret = string.format( LocalizeManager.get("dayHourLater"),d, lh )
        else
            ret = string.format( LocalizeManager.get("dayLater"), d)
		end
	else
		ret = math.getFormatSeconds(seconds)
	end
	return ret
end

function math.shuffleList(list)
    for i = #list, 2, -1 do
        local j = math.random(i)
        list[i], list[j] = list[j], list[i]
    end
end

function math.getFormatStrTimeStamp(str, time)
    return os.date(str, time)
end

function math.getCurYMDTime()
    return os.date("%Y%m%d",os.time())
end

--[[
    -- @desc: 计算字符串字符个数
    -- author:{author}
    -- --@inputstr: 源字符串
    -- return 字符个数
]]--
function math.getStringCharCount(str)
    local lenInByte = #str
    local charCount = 0
    local i = 1
    while (i <= lenInByte) 
    do
        local curByte = string.byte(str, i)
        local byteCount = 1;
        if curByte > 0 and curByte <= 127 then
            byteCount = 1                                               --1字节字符
        elseif curByte >= 192 and curByte < 223 then
            byteCount = 2                                               --双字节字符
        elseif curByte >= 224 and curByte < 239 then
            byteCount = 3                                               --汉字
        elseif curByte >= 240 and curByte <= 247 then
            byteCount = 4                                               --4字节字符
        end
        
        local char = string.sub(str, i, i + byteCount - 1)
        i = i + byteCount                                               -- 重置下一字节的索引
        charCount = charCount + 1                                       -- 字符的个数（长度）
    end
    return charCount
end
